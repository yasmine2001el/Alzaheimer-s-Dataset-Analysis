library(caret)
library(caret)
library(caret)
library(jpeg)
data2 <- list()
setwd("C:/Users/user/Documents/YASSMINE GIIA/CL-2-(IDIA)/S3/Fouille de donnees et visualisation des donnees/mini-projet-ELAMRANI/Alzheimer_s Dataset/train")
# use list.files to get a list of all the images in the directories
image_files <- list.files('C:/Users/user/Documents/YASSMINE GIIA/CL-2-(IDIA)/S3/Fouille de donnees et visualisation des donnees/mini-projet-ELAMRANI/Alzheimer_s Dataset/train', recursive = TRUE, pattern = '*.jpg')
# iterate through the list of images
for (image_file in image_files) {
# use readJPEG to read and load the image
img <- readJPEG(image_file)
data2 <- c(data2, list(img))
}
# create a vector to store the labels
labels <- character(length(image_files))
# iterate through the list of images
for (i in 1:length(image_files)) {
# extract the label from the directory name
labels[i] <- dirname(image_files[i])
}
# split the data into a training set and a testing set
indices <- createDataPartition(labels, p = 0.7, list = TRUE)
indices1 <- unlist(indices)
training_data <- data[indices, ]
training_labels <- labels[indices1]
testing_data <- data[-indices, ]
testing_labels <- labels[-indices1]
View(testing_labels)
data2[[789]]
display(data2[[789]])
library(EBImage)
display(data2[[789]])
summary(data2[[1]])
hist(data2[[1]])
str(data2)
#importing libraries:
library(jpeg)
library(EBImage)
library(opencv)
library(keras)
library(tensorflow)
library(tensorflow)
data2 <- list()
setwd("C:/Users/user/Documents/YASSMINE GIIA/CL-2-(IDIA)/S3/Fouille de donnees et visualisation des donnees/mini-projet-ELAMRANI/Alzheimer_s Dataset/train")
image_files <- list.files('C:/Users/user/Documents/YASSMINE GIIA/CL-2-(IDIA)/S3/Fouille de donnees et visualisation des donnees/mini-projet-ELAMRANI/Alzheimer_s Dataset/train', recursive = TRUE, pattern = '*.jpg')
for (image_file in image_files) {
# use readJPEG to read and load the image
img <- readJPEG(image_file)
data2 <- c(data2, list(img))
}
# Set image size
width <- 50
height <- 50
extract_feature <- function(image_files, width, height, labelsExist = T) {
img_size <- width * height
## List images in path
images_names <- list.files(dir_path)
if(labelsExist){
## Select only cats or dogs images
catdog <- str_extract(images_names, "^(cat|dog)")
# Set cat == 0 and dog == 1
key <- c("cat" = 0, "dog" = 1)
y <- key[catdog]
}
print(paste("Start processing", length(images_names), "images"))
## This function will resize an image, turn it into greyscale
feature_list <- pblapply(images_names, function(imgname) {
## Read image
img <- readImage(file.path(dir_path, imgname))
## Resize image
img_resized <- resize(img, w = width, h = height)
## Set to grayscale (normalized to max)
grayimg <- channel(img_resized, "gray")
## Get the image as a matrix
img_matrix <- grayimg@.Data
## Coerce to a vector (row-wise)
img_vector <- as.vector(t(img_matrix))
return(img_vector)
})
## bind the list of vector into matrix
feature_matrix <- do.call(rbind, feature_list)
feature_matrix <- as.data.frame(feature_matrix)
## Set names
names(feature_matrix) <- paste0("pixel", c(1:img_size))
if(labelsExist){
return(list(X = feature_matrix, y = y))
}else{
return(feature_matrix)
}
}
img_size <- width * height
## List images in path
images_names <- list.files(image_files)
data[[2]]
data([[2]])
data2[[2]]
library(gridExtra)
install.packages("gridExtra")
library(gridExtra)
library(gridExtra)
CLASSES = [ 'NonDemented',
CLASSES = c('NonDemented',
'VeryMildDemented',
'MildDemented',
'ModerateDemented')
IMAGE_SIZE = (176,208)
IMAGE_SIZE = c(176,208)
library("caret")
library("recipes")
library("recipes")
data(iris)
dataset <- iris
View(iris)
#create training and validation datasets
validation_index <- createDataPartition(dataset$Species, p=0.80, list = FALSE)
#select 20% of the data for validation
validation <- dataset[-validation_index,]
#use the remaining 80% of data to training and testing the models
dataset <- dataset[validation_index,]
dim(dataset)
#types of attributes
sapply(dataset, class) #applique la fonction class sur la datset
levels(dataset$Species)
percentage <- prop.table(table(dataset$Species)) * 100
cbind(freq = table(dataset$Species), percentage= percentage)
